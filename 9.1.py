# Китепканаларды импорттоо
import numpy as np  # NumPy массивдер жана математикалык операциялар үчүн
import matplotlib.pyplot as plt  # 2D графиктерди тартуу үчүн
from mpl_toolkits.mplot3d import Axes3D  # 3D графиктерди тартуу үчүн

# Параметрлерди жана сетканы аныктоо
L = 1.0        # Мейкиндик узундугу (x интервал)
T = 1.0        # Убакыт узундугу (t интервал)
Nx = 50        # Мейкиндик боюнча бөлүнгөн чекиттердин саны
Nt = 200       # Убакыт боюнча бөлүнгөн чекиттердин саны
dx = L / Nx    # Мейкиндик чекиттери ортосундагы аралык
dt = T / Nt    # Убакыт чекиттери ортосундагы аралык

# Мейкиндик жана убакыт үчүн сеткаларды түзүү
x = np.linspace(0, L, Nx + 1)  # Мейкиндик боюнча Nx+1 чекиттен турган массив
t = np.linspace(0, T, Nt + 1)  # Убакыт боюнча Nt+1 чекиттен турган массив

# Баштапкы жана чектик шарттарды аныктоо үчүн функциялар
def phi(x):  # u(x, 0), баштапкы шарт t=0 үчүн
    return np.sin(np.pi * x)  # Синус формасында баштапкы толкун

def psi(x):  # du/dt|_{t=0}, баштапкы шарттын убакыт боюнча туундусу
    return 0 * x  # Убакыт боюнча туунду нөлгө барабар

def alpha(t):  # du/dx|_{x=0}, x=0 чектик шарт
    return 0 * t  # Нөл функциясы

def beta(t):  # u(1, t), x=1 чектик шарт
    return 0 * t  # Нөл функциясы

def f(x, t):  # Кошумча функция f(x, t), теңдеменин оң жагындагы мүчө
    return np.sin(2 * np.pi * t) * np.cos(2 * np.pi * x)  # Вариациялык функция

# Баштапкы шарттарды даярдоо
u = np.zeros((Nx + 1, Nt + 1))  # u массиви, мейкиндик жана убакыт боюнча нөлгө толтурулган
u[:, 0] = phi(x)  # Баштапкы шартты (u(x, 0)) колдонуу

# Биринчи убакыт катмарын эсептөө үчүн формула
u[1:-1, 1] = (  # Мейкиндик ички чекиттери үчүн (x=0 жана x=1 эмес)
    u[1:-1, 0]  # Мурдагы убакыт катмарынын мааниси
    + dt * psi(x[1:-1])  # Баштапкы убакыт боюнча туунду
    + (dt**2 / 2) * (  # Убакыт боюнча экинчи тартиптүү сандык туунду
        (x[1:-1] + 3) * (u[2:, 0] - 2 * u[1:-1, 0] + u[:-2, 0]) / dx**2  # Мейкиндик боюнча экинчи тартиптүү туунду
        - x[1:-1] * u[1:-1, 0]  # Потенциалдык мүчө
        + f(x[1:-1], t[0])  # Кошумча функциянын биринчи убакыт катмары
    )
)

# Убакыт боюнча чечимди эсептөө
for j in range(1, Nt):  # Убакыт катмарлары боюнча цикл
    # Чектик шарттарды колдонуу
    u[0, j + 1] = u[1, j + 1] - alpha(t[j]) * dx  # x=0 үчүн шарт
    u[-1, j + 1] = beta(t[j])  # x=1 үчүн шарт

    # Мейкиндик ички чекиттери үчүн эсептөөлөр
    for i in range(1, Nx):  # Мейкиндик чекиттери боюнча цикл
        u[i, j + 1] = (  # u(x_i, t_j+1) маанисин эсептөө
            2 * u[i, j]  # Мурдагы убакыт катмарынын эки эселенген мааниси
            - u[i, j - 1]  # Бир убакыт мурунку катмардын мааниси
            + dt**2 * (  # Убакыттагы туунду үчүн коэффициент
                ((x[i] + 3) * (u[i + 1, j] - 2 * u[i, j] + u[i - 1, j]) / dx**2)  # Мейкиндик боюнча экинчи туунду
                - x[i] * u[i, j]  # Потенциалдык мүчө
                + f(x[i], t[j])  # Кошумча функциянын учурдагы мааниси
            )
        )

# Жыйынтыкты визуалдаштыруу үчүн сеткаларды даярдоо
X, T = np.meshgrid(x, t, indexing="ij")  # Мейкиндик жана убакыт боюнча 2D сетканы түзүү

# Визуалдаштыруу үчүн 3D графикти түзүү
fig = plt.figure(figsize=(10, 8))  # Графиктин көлөмүн аныктоо
ax = fig.add_subplot(111, projection='3d')  # 3D огу менен субплот түзүү

# 3D беттин сүрөтүн тартуу
ax.plot_surface(X, T, u, cmap='viridis', edgecolor='none')  # Графикти тартуу жана түстөрдү колдонуу

# Графиктин огу жана аталыштарын берүү
ax.set_xlabel('Space x')  # Мейкиндик огу
ax.set_ylabel('Time t')  # Убакыт огу
ax.set_zlabel('u(x, t)')  # Чечимдин мааниси
ax.set_title('Solution of the Hyperbolic Equation (3D View)')  # Графиктин аталышы

plt.show()  # Графикти көрсөтүү
