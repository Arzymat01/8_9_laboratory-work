import numpy as np  # Математикалык операциялар жана массивдер үчүн
import matplotlib.pyplot as plt  # Графиктерди түзүү үчүн
from mpl_toolkits.mplot3d import Axes3D  # 3D графиктерди түзүү үчүн

# Тордун өлчөмдөрү жана кадамы
N = 50  # Торчо (grid) чекиттеринин саны
h = 1 / (N - 1)  # Кадам (торчодогу ар бир чекит арасындагы аралык)

# Торчо чекиттери
x = np.linspace(0, 1, N)  # x багытындагы чекиттер
y = np.linspace(0, 1, N)  # y багытындагы чекиттер
X, Y = np.meshgrid(x, y)  # 2D сетка түзүү үчүн торчо чекиттерин бириктирүү

# Так чыгарылыш (сыналган жооп)
u_exact = X**3 * Y + X * Y**2  # Берилген теңдеменин аналитикалык (так) чечими

# f(x, y) функциясы
f = -2 * X * (3 * Y + 1)  # Δu = f функциясын аныктоо

# Чектик шарттар (u(0, y), u(1, y), u(x, 0), u(x, 1))
u = np.zeros((N, N))  # Торчо үчүн баштапкы маанилер (нөлдөр массиви)
u[0, :] = u_exact[0, :]  # x = 0 чектик шарт: так чыгарылыштын мааниси колдонулат
u[-1, :] = u_exact[-1, :]  # x = 1 чектик шарт
u[:, 0] = u_exact[:, 0]  # y = 0 чектик шарт
u[:, -1] = u_exact[:, -1]  # y = 1 чектик шарт

# Итерация параметрлери
tolerance = 1e-6  # Тактык (катанын максималдуу деңгээли)
max_iterations = 10000  # Максималдуу итерация саны
error = 1  # Баштапкы ката
iteration = 0  # Итерациялардын баштапкы саны

# Итерациялык чектелген айырмалар ыкмасы
while error > tolerance and iteration < max_iterations:  # Тактыкка жетмейинче же итерация чеги бүтмөйүнчө
    u_new = u.copy()  # u массивинин жаңы версиясын түзүү
    for i in range(1, N - 1):  # x багытындагы ички чекиттер
        for j in range(1, N - 1):  # y багытындагы ички чекиттер
            u_new[i, j] = 0.25 * (  # Чектелген айырмалар ыкмасы менен u[i, j] жаңыртуу
                u[i+1, j] + u[i-1, j]  # Сол жана оң чекиттер
                + u[i, j+1] + u[i, j-1]  # Жогорку жана төмөнкү чекиттер
                - h**2 * f[i, j]  # Δu = f үчүн оң тарап
            )
    error = np.max(np.abs(u_new - u))  # Максималдуу катаны эсептөө
    u = u_new  # Эски чечимди жаңы чечимге алмаштыруу
    iteration += 1  # Итерациялардын санын көбөйтүү

# Итерациялардын жалпы санын жана акыркы катаны чыгаруу
print(f"Итерациялар саны: {iteration}")
print(f"Акыркы ката: {error:.2e}")

# Сандык чечимди 3D форматта көрсөтүү
fig = plt.figure(figsize=(12, 8))  # Графиктин көлөмүн аныктоо
ax = fig.add_subplot(111, projection='3d')  # 3D огу менен субплот түзүү
surf = ax.plot_surface(X, Y, u, cmap='viridis', edgecolor='none')  # 3D беттик график түзүү
ax.set_title("Сандык чечим: u(x, y)")  # Графиктин аталышы
ax.set_xlabel("x")  # x огу
ax.set_ylabel("y")  # y огу
ax.set_zlabel("u(x, y)")  # z огу
fig.colorbar(surf, shrink=0.5, aspect=10, label="u(x, y)")  # Түс шкаласын кошуу
plt.show()  # Графикти көрсөтүү

# Так жана сандык жоопту салыштыруу үчүн ката графиги
fig = plt.figure(figsize=(12, 8))  # Экинчи графиктин көлөмүн аныктоо
ax = fig.add_subplot(111, projection='3d')  # 3D субплот түзүү
surf = ax.plot_surface(X, Y, np.abs(u - u_exact), cmap='plasma', edgecolor='none')  # Катаны көрсөтүү графиги
ax.set_title("Так жана сандык чечимдин ортосундагы ката")  # Графиктин аталышы
ax.set_xlabel("x")  # x огу
ax.set_ylabel("y")  # y огу
ax.set_zlabel("Ката |u - u_exact|")  # z огу (катанын мааниси)
fig.colorbar(surf, shrink=0.5, aspect=10, label="Ката |u - u_exact|")  # Түс шкаласын кошуу
plt.show()  # Графикти көрсөтүү
